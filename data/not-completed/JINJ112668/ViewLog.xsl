<?xml version="1.0" encoding="utf-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"                xmlns:vt="http://www.elsevier.com/xml/apps/qc/v" version='1.0'><xsl:output method="html"/><!--This stylesheet is compatible with vtool v5.0.0--><xsl:template match="/">  <html>    <title>Vtool Log Report</title>    <head>      <style type="text/css">	div.summary {background:Lavender;padding-left:5px;padding-top:5px;padding-bottom:5px;margin-bottom:15px;}	h1 {background:LightSteelBlue;padding-top:5px;padding-bottom:5px;text-align:center;}	p.para {margin-left:20px;}	p.para1 {margin-left:20px;}   li.para1{margin-bottom:3px;}	p.okay {margin-left:20px; color:#CC6600;}	p.error{margin-left:20px; color:Gray;}	p.info{margin-left:20px; color:Gray;}	p.usage{margin-left:20px; color:Gray;}	p.warning{margin-left:20px; color:Gray;}	p.debug{margin-left:20px; color:Gray;}      span.txtFrgmtHighlight{background:yellow; color:green; font-size:120%;}      </style>    </head>    <xsl:apply-templates/>  </html></xsl:template><xsl:template match="*">  <xsl:element name="{name()}">    <xsl:apply-templates select="@*"/>    <xsl:apply-templates select="node()" />  </xsl:element></xsl:template><xsl:template match="@*">  <xsl:attribute name="{name()}">    <xsl:value-of select="." />  </xsl:attribute></xsl:template><xsl:template match="text()">  <xsl:value-of select="." /></xsl:template><xsl:template match="processing-instruction()">  <xsl:processing-instruction name="{name()}"><xsl:value-of select="." /></xsl:processing-instruction></xsl:template><xsl:template match="comment()">  <xsl:comment><xsl:value-of select="." /></xsl:comment></xsl:template><xsl:template match="LogReport">  <body style="font-family:verdana;font-size:90%;">    <h1>Vtool Log Report</h1>    <div class="summary">      <h2>Summary</h2>      <p><b>Input file</b></p>      <p class="para"><xsl:value-of select="@filename"/></p>      <p><b>Command line options used</b></p>      <p class="para"><xsl:value-of  select="Log/command-line-options"/></p>      <p><b>Total files processed</b></p>      <p class="para"><xsl:value-of  select="count(/descendant::Log)"/></p>      <p><b>File(s) with errors</b></p>      <xsl:choose>	<xsl:when test="count(descendant::results[total-errors != '0']) = 0">	  <p class="para">NIL</p>	</xsl:when>	<xsl:otherwise>	  <ol>	    <xsl:for-each  select="descendant::Log[results/total-errors[. != '0']]">	      <li class="para1">		<a href="#{generate-id()}"><xsl:value-of select="translate(@filename,'\\','/')"/></a>	      </li>	    </xsl:for-each>	  </ol>	</xsl:otherwise>      </xsl:choose>      <p><b>File(s) with warnings</b></p>      <xsl:choose>	<xsl:when test="count(descendant::results[total-warnings != '0']) = 0">	  <p class="para">NIL</p>	</xsl:when>	<xsl:otherwise>	  <ol>	    <xsl:for-each  select="descendant::Log[results/total-warnings[. != '0']]">	      <li class="para1">		<a href="#{generate-id()}"><xsl:value-of select="translate(@filename,'\\','/')"/></a>	      </li>	    </xsl:for-each>	  </ol>	</xsl:otherwise>      </xsl:choose>      <p><b>Start Time</b></p>      <p class="para"><xsl:value-of  select="Log/time"/></p>      <p><b>End Time</b></p>      <p class="para"><xsl:value-of  select="descendant::time[position()=last()]"/></p>    </div>    <xsl:apply-templates/>  </body></xsl:template><xsl:template match="Log[parent::Log or parent::skipped-checks]">    <hr color="#FFCC66"/>    <p id="{generate-id()}"><b>File</b>:&#xa0;&#xa0;<a href="http://apollo.aptaracorp.com/xmlbrowse{@filename}" target="_blank"><xsl:value-of select="translate(@filename,'\\','/')"/></a></p>    <xsl:apply-templates/></xsl:template> <xsl:template match="Log[not(parent::Log)]"><hr color="#FFCC66"/><p id="{generate-id()}"><b>File</b>:&#xa0;&#xa0;<a href="http://apollo.aptaracorp.com/xmlbrowse{@filename}" target="_blank"><xsl:value-of select="@filename"/></a></p><xsl:apply-templates select="child::results"/><xsl:apply-templates select="child::Log"/><xsl:apply-templates select="child::skipped-checks"/></xsl:template><xsl:template match="results">  <p><b>Results:</b></p>  <xsl:if test="total-errors != '0'">    <p class="para1">Total errors: <xsl:value-of  select="total-errors"/></p>  </xsl:if>  <xsl:if test="total-warnings != '0'">    <p class="para1">Total warnings: <xsl:value-of  select="total-warnings"/></p>  </xsl:if>  <xsl:if test="total-skipped-checks != '0'">    <p class="para1">Total skipped checks: <xsl:value-of  select="total-skipped-checks"/></p>  </xsl:if>  <xsl:if test="total-errors = '0' and total-warnings = '0' and total-skipped-checks = '0'">    <p class="okay">No errors and warnings</p>  </xsl:if>  <xsl:for-each select="total-errors">    <xsl:apply-templates select="."/>  </xsl:for-each>  <xsl:for-each select="total-warnings">    <xsl:apply-templates select="."/>  </xsl:for-each>  <xsl:for-each select="total-skipped-checks">    <xsl:apply-templates select="."/>  </xsl:for-each>  <xsl:call-template name="skipcheck"/>  <xsl:for-each select="message[@type!='info' and @type!='usage']">    <xsl:sort select="translate(@position,':','.')" order="ascending" data-type="number"/>    <xsl:sort select="@id" order="ascending"/>    <xsl:apply-templates select="."/>  </xsl:for-each>  <xsl:if test="message[@type='info']">  <p class="info"><font color="#0000FF">Info:</font>    <ul style="list-style-type:none;">      <xsl:for-each select="message[@type='info']">        <xsl:if test="contains(.,'===') or contains(.,'Validation Report')">         <br/>        </xsl:if>        <li><xsl:value-of select="."/></li>			<xsl:if test="position() != last()"><br/></xsl:if>      </xsl:for-each>    </ul></p>  </xsl:if>  <xsl:if test="message[@type='usage']">  <p class="usage"><font color="#155724">Usage:</font>    <ul style="list-style-type:none;">      <xsl:for-each select="message[@type='usage']">        <xsl:if test="contains(.,'===') or contains(.,'Validation Report')">         <br/>        </xsl:if>        <li><xsl:value-of select="."/></li>			<xsl:if test="position() != last()"><br/></xsl:if>      </xsl:for-each>    </ul></p>  </xsl:if>  <xsl:apply-templates select="Log"/></xsl:template><xsl:template match="message[@type='warning']">  <p class="warning"><font color="#FF00CC">Warning [<xsl:value-of  select="@id"/>] [<xsl:choose><xsl:when test="@position[.!='']"><xsl:variable name="apos"><xsl:text>&#39;</xsl:text></xsl:variable><xsl:variable name="position" select="translate(@position,$apos,'')"/><xsl:choose><xsl:when test="starts-with(@position,'$')"><xsl:value-of select="translate(translate($position,'$]',''),'[','/')"/></xsl:when><xsl:otherwise><xsl:value-of select="$position"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:text>unknown</xsl:text></xsl:otherwise></xsl:choose>]<xsl:if test="@file"> [<xsl:value-of  select="@file"/>]</xsl:if>:</font>&#xA0;<xsl:value-of  select="."/></p></xsl:template><xsl:template match="message[@type='error']">  <p class="error"><font color="#FF0033">Error [<xsl:choose><xsl:when test="@id"><xsl:value-of  select="@id"/></xsl:when><xsl:otherwise><xsl:text>Exception</xsl:text></xsl:otherwise></xsl:choose>] [<xsl:choose><xsl:when test="@position[.!='']"><xsl:variable name="apos"><xsl:text>&#39;</xsl:text></xsl:variable><xsl:variable name="position" select="translate(@position,$apos,'')"/><xsl:choose><xsl:when test="starts-with(@position,'$')"><xsl:value-of select="translate(translate($position,'$]',''),'[','/')"/></xsl:when><xsl:otherwise><xsl:value-of select="$position"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:text>unknown</xsl:text></xsl:otherwise></xsl:choose>]<xsl:if test="@file"> [<xsl:value-of  select="@file"/>]</xsl:if>:</font>&#xA0;<xsl:choose><xsl:when test="contains(.,'&#x02064;')"><xsl:value-of select="substring-before(.,'&#x02064;')"/><span class="txtFrgmtHighlight"><xsl:value-of select="substring-before(substring-after(.,'&#x02064;'),'&#x02064;')"/></span><xsl:value-of select="substring-after(substring-after(.,'&#x02064;'),'&#x02064;')"/></xsl:when><xsl:otherwise><xsl:value-of select="."/></xsl:otherwise></xsl:choose></p></xsl:template><xsl:template match="message[@type='info']">  <p class="info"><font color="#0000FF">Info [<xsl:choose><xsl:when test="@id"><xsl:value-of  select="@id"/></xsl:when><xsl:otherwise><xsl:text>Exception</xsl:text></xsl:otherwise></xsl:choose>] [<xsl:choose><xsl:when test="@position[.!='']"><xsl:variable name="apos"><xsl:text>&#39;</xsl:text></xsl:variable><xsl:variable name="position" select="translate(@position,$apos,'')"/><xsl:choose><xsl:when test="starts-with(@position,'$')"><xsl:value-of select="translate(translate($position,'$]',''),'[','/')"/></xsl:when><xsl:otherwise><xsl:value-of select="$position"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:text>unknown</xsl:text></xsl:otherwise></xsl:choose>]<xsl:if test="@file"> [<xsl:value-of  select="@file"/>]</xsl:if>:</font>&#xA0;<xsl:choose><xsl:when test="contains(.,'&#x02064;')"><xsl:value-of select="substring-before(.,'&#x02064;')"/><span class="txtFrgmtHighlight"><xsl:value-of select="substring-before(substring-after(.,'&#x02064;'),'&#x02064;')"/></span><xsl:value-of select="substring-after(substring-after(.,'&#x02064;'),'&#x02064;')"/></xsl:when><xsl:otherwise><xsl:value-of select="."/></xsl:otherwise></xsl:choose></p></xsl:template><xsl:template match="message[@type='usage']">  <p class="usage"><font color="#155724">Usage [<xsl:choose><xsl:when test="@id"><xsl:value-of  select="@id"/></xsl:when><xsl:otherwise><xsl:text>Exception</xsl:text></xsl:otherwise></xsl:choose>] [<xsl:choose><xsl:when test="@position[.!='']"><xsl:variable name="apos"><xsl:text>&#39;</xsl:text></xsl:variable><xsl:variable name="position" select="translate(@position,$apos,'')"/><xsl:choose><xsl:when test="starts-with(@position,'$')"><xsl:value-of select="translate(translate($position,'$]',''),'[','/')"/></xsl:when><xsl:otherwise><xsl:value-of select="$position"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:text>unknown</xsl:text></xsl:otherwise></xsl:choose>]<xsl:if test="@file"> [<xsl:value-of  select="@file"/>]</xsl:if>:</font>&#xA0;<xsl:choose><xsl:when test="contains(.,'&#x02064;')"><xsl:value-of select="substring-before(.,'&#x02064;')"/><span class="txtFrgmtHighlight"><xsl:value-of select="substring-before(substring-after(.,'&#x02064;'),'&#x02064;')"/></span><xsl:value-of select="substring-after(substring-after(.,'&#x02064;'),'&#x02064;')"/></xsl:when><xsl:otherwise><xsl:value-of select="."/></xsl:otherwise></xsl:choose></p></xsl:template><xsl:template match="message[@type='debug']">  <p class="debug"><font color="#FF0033">Error [<xsl:choose><xsl:when test="@id"><xsl:value-of  select="@id"/></xsl:when><xsl:otherwise><xsl:text>Exception</xsl:text></xsl:otherwise></xsl:choose>] [<xsl:choose><xsl:when test="@position[.!='']"><xsl:value-of  select="@position"/></xsl:when><xsl:otherwise><xsl:text>unknown</xsl:text></xsl:otherwise></xsl:choose>]<xsl:if test="@file"> [<xsl:value-of  select="@file"/>]</xsl:if>:</font>&#xA0;<xsl:value-of  select="."/></p></xsl:template><xsl:template match="total-skipped-checks		     |total-warnings		     |total-errors		     |command-line-options		     |time		     |check-id		     "/><xsl:template name="skipcheck"><xsl:for-each select="../skipped-checks|skipped-checks">    <p class="para1">      Skipped checks ID:      <xsl:for-each select="check-id">	<font color="Gray"><xsl:value-of  select="."/>	<xsl:if test="name(following-sibling::*[1])='check-id'">, </xsl:if></font>      </xsl:for-each>    </p>  </xsl:for-each></xsl:template></xsl:stylesheet>